library(here)
library(lubridate)
library(stringr)
library(rhdf5)
library(tuneR)
#Define path to functions that we will use
source(here('NoiseProcessingFxs.r'))
# Scratch directory to set up noise analysis metrics following merchant 2012 (I think)
################################################################
# Load list of sound files and start times, assumes all audio files are the
# same duration
################################################################
# Assumes
# 1) file names in UTC
# 2) All sample rates are the same
fileLoc = 'D:\\RECORDINGS\\ADRIFT_001_CENSOR_12kHz'
fileLoc ='D:\\RECORDINGS\\ADRIFT_002_CENSOR_12kHz'
#fileLoc = 'C:\\Users\\kaitlin.palmer\\Downloads\\mee312330-sup-0002-datas1\\PAMGuide'
fileLoc ='D:\\Recordings\\ADRIFT_024_CENSOR\\ST6664'
fileLoc = 'D:\\300 Data Recovery\\RECORDINGS\\ADRIFT_001_CENSOR_12kHz'
# Jasco Pattern
nameStringPattern = '\\d{8}T\\d{6}.\\d{3}'
nameStringFormat =" %Y%m%dT%H%M%OS"
# Soundtrap Pattern
nameStringPattern = '\\d{12}'
nameStringFormat ='%y%m%d%H%M%OS'
lubradiateFormat ="ymdHMS"
# Set up the audiodataframe
audioData = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
fileLoc = 'D:\\RECORDINGS\\ADRIFT_001_CENSOR_12kHz'
fileLoc ='D:\\RECORDINGS\\ADRIFT_002_CENSOR_12kHz'
#fileLoc = 'C:\\Users\\kaitlin.palmer\\Downloads\\mee312330-sup-0002-datas1\\PAMGuide'
fileLoc ='D:\\Recordings\\ADRIFT_024_CENSOR\\ST6664'
fileLoc = 'C:\\Users\\kaitlin.palmer\\Desktop/ADRIFTLF/ADRIFT_024'
# Jasco Pattern
nameStringPattern = '\\d{8}T\\d{6}.\\d{3}'
nameStringFormat =" %Y%m%dT%H%M%OS"
# Soundtrap Pattern
nameStringPattern = '\\d{12}'
nameStringFormat ='%y%m%d%H%M%OS'
lubradiateFormat ="ymdHMS"
# Set up the audiodataframe
audioData = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
View(audioData)
# Pull sample rate from first file, assume consistnat (required)
prms = av_media_info(audioData$files[1])$audio
prms$duration = av_media_info(audioData$files[1])$duration
colnames(prms)[colnames(prms)=='sample_rate']='Fs' # field standard
?? av_media_info
# Pull sample rate from first file, assume consistnat (required)
prms = av_media_info(audioData$files[1])$audio
prms$duration = av_media_info(audioData$files[1])$duration
colnames(prms)[colnames(prms)=='sample_rate']='Fs' # field standard
dataOut = list(audioData=audioData, prms=)
dataOut = list(audioData=audioData, prms=prms)
dataOut$prmsrms
dataOut$prms
source("~/GitHub/YAWN_functions/NoiseProcessingFxs.R")
# Set up the audiodataframe
audioData = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
# Set up the audiodataframe
dataOut = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
prms=dataOut$prms
View(prms)
rm(list = ls())
library(here)
library(lubridate)
library(stringr)
library(rhdf5)
library(tuneR)
#Define path to functions that we will use
source(here('NoiseProcessingFxs.r'))
# Scratch directory to set up noise analysis metrics following merchant 2012 (I think)
################################################################
# Load list of sound files and start times, assumes all audio files are the
# same duration
################################################################
# Assumes
# 1) file names in UTC
# 2) All sample rates are the same
fileLoc = 'D:\\RECORDINGS\\ADRIFT_001_CENSOR_12kHz'
fileLoc ='D:\\RECORDINGS\\ADRIFT_002_CENSOR_12kHz'
#fileLoc = 'C:\\Users\\kaitlin.palmer\\Downloads\\mee312330-sup-0002-datas1\\PAMGuide'
fileLoc ='D:\\Recordings\\ADRIFT_024_CENSOR\\ST6664'
fileLoc = 'C:\\Users\\kaitlin.palmer\\Desktop/ADRIFTLF/ADRIFT_024'
# Jasco Pattern
nameStringPattern = '\\d{8}T\\d{6}.\\d{3}'
nameStringFormat =" %Y%m%dT%H%M%OS"
# Soundtrap Pattern
nameStringPattern = '\\d{12}'
nameStringFormat ='%y%m%d%H%M%OS'
lubradiateFormat ="ymdHMS"
# Set up the audiodataframe
dataOut = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
prms=dataOut$prms
######################################################################
# Set up the analysis parameters
###################################################################
##
# User defined parameters
##
prms$N = prms$Fs # fft lenght in samples
prms$r = 0.5 # overlap in percent
prms$aveSec = 60 # averaging window (seconds)
prms$secSkip = 0 # number of seconds to skip when loading the file (soundtraps...)
# ratio of new to original window lengths in Welch method (avg over aveSec secs)
prms$welch = prms$aveSec*(prms$Fs/prms$N)/(1-prms$r)
# Analysis frequencies (hz).
prms$lcut =10
prms$hcut = prms$Fs/2
# Reference pressure, set to 1 for water 20 for air
prms$pref =1
# remove DC offset by subtracting mean(yy) from yy
prms$rmDC = TRUE
# Create window functions as defined by NM 2014
dataOut = createWindow('Hann', prms)
w =dataOut[[1]]
prms$alpha = dataOut[[2]]
###################################
# Calibration, either end to end or frequency response
###########################################
# Frequency response example, make sure start/end frequencies cover
# low frequency analysis end and nyquest
freqResp = data.frame(f = round(10:prms$Fs/2))
freqResp$E2E = seq(-185, -165, length.out = nrow(freqResp))
prms$freqCal= list(freqResp)
# End to end example
prms$freqCal= -161.1
metrics=list('hybrid', 'broadband', 'decadeband')
'hybrid' %in% metrics
'thirdoct' %in% metrics
'broaDband' %in% metrics
'broadband' %in% metrics
# Which metrics to calcualte
prms$metrics = list('hybrid', 'broadband', 'decadeband', 'thirdoct')
list('hybrid', 'broadband', 'decadeband', 'thirdoct')
rm(list = ls())
library(here)
library(lubridate)
library(stringr)
library(rhdf5)
library(tuneR)
#Define path to functions that we will use
source(here('NoiseProcessingFxs.r'))
# Scratch directory to set up noise analysis metrics following merchant 2012 (I think)
################################################################
# Load list of sound files and start times, assumes all audio files are the
# same duration
################################################################
# Assumes
# 1) file names in UTC
# 2) All sample rates are the same
fileLoc = 'D:\\RECORDINGS\\ADRIFT_001_CENSOR_12kHz'
fileLoc ='D:\\RECORDINGS\\ADRIFT_002_CENSOR_12kHz'
#fileLoc = 'C:\\Users\\kaitlin.palmer\\Downloads\\mee312330-sup-0002-datas1\\PAMGuide'
fileLoc ='D:\\Recordings\\ADRIFT_024_CENSOR\\ST6664'
fileLoc = 'C:\\Users\\kaitlin.palmer\\Desktop/ADRIFTLF/ADRIFT_024'
# Jasco Pattern
nameStringPattern = '\\d{8}T\\d{6}.\\d{3}'
nameStringFormat =" %Y%m%dT%H%M%OS"
# Soundtrap Pattern
nameStringPattern = '\\d{12}'
nameStringFormat ='%y%m%d%H%M%OS'
lubradiateFormat ="ymdHMS"
# Set up the audiodataframe
dataOut = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
prms=dataOut$prms
######################################################################
# Set up the analysis parameters
###################################################################
##
# User defined parameters
##
prms$N = prms$Fs # fft lenght in samples
prms$r = 0.5 # overlap in percent
prms$aveSec = 60 # averaging window (seconds)
prms$secSkip = 0 # number of seconds to skip when loading the file (soundtraps...)
# ratio of new to original window lengths in Welch method (avg over aveSec secs)
prms$welch = prms$aveSec*(prms$Fs/prms$N)/(1-prms$r)
# Analysis frequencies (hz).
prms$lcut =10
prms$hcut = prms$Fs/2
# Reference pressure, set to 1 for water 20 for air
prms$pref =1
# remove DC offset by subtracting mean(yy) from yy
prms$rmDC = TRUE
# Create window functions as defined by NM 2014
dataOut = createWindow('Hann', prms)
w =dataOut[[1]]
prms$alpha = dataOut[[2]]
# Which metrics to calcualte
prms$metrics = list('hybrid', 'broadband', 'decadeband', 'thirdoct')
# Frequency response example, make sure start/end frequencies cover
# low frequency analysis end and nyquest
freqResp = data.frame(f = round(10:prms$Fs/2))
freqResp$E2E = seq(-185, -165, length.out = nrow(freqResp))
prms$freqCal= list(freqResp)
prms$freqCal
t(list('hybrid', 'broadband', 'decadeband', 'thirdoct'))
# Which metrics to calcualte
prms$metrics = t(list('hybrid', 'broadband', 'decadeband', 'thirdoct'))
# Which metrics to calcualte
prms$metrics = t(list('hybrid', 'broadband', 'decadeband', 'thirdoct'))
###################################
# Calibration, either end to end or frequency response
###########################################
# Frequency response example, make sure start/end frequencies cover
# low frequency analysis end and nyquest
freqResp = data.frame(f = round(10:prms$Fs/2))
freqResp$E2E = seq(-185, -165, length.out = nrow(freqResp))
prms$freqCal= list(freqResp)
# End to end example
prms$freqCal= -161.1
idStart =1
ii=1
calcMetrics<-function(prms, Psstrimmed, f, w){
# Driver function to return a matrix of
# metrics - list of metrics to calculate including hybrid, broadband, decadeband
# and thirdoct
# prms- dataframe of parameters
# Psstrimmed - power spectrum
# f - frequencies associated with the PSS
outList = list()
if('hybrid' %in% metrics){
# Hybrid milidecade from PSS
hybridMilidecade = calcHybridMiDecade(prms, Psstrimmed, f, w)
# add key value pair
outList[['hybLevels']]<-hybridMilidecade[[1]]
outList[['hybFreqs']]<-hybridMilidecade[[2]]
}
if('thirdoct' %in% metrics){
# Third Ocatave Bands (checked)
thirdOctBands= calcThirdOctBands(prms, Psstrimmed,f, w)
# add key value pair
outList[['thridOctLevels']]<-thirdOctBands[[1]]
outList[['thirdOctF']]<-thirdOctBands[[2]]
}
if('decadeband' %in% metrics){
# Decade bands
DecadeBands =calcDecadeBands(prms, Psstrimmed,f, w)
# add key value pair
outList[['DecadeBandsLevels']]<-DecadeBands[[1]]
outList[['DecadeBandsF']]<-DecadeBands[[2]]
}
if('broadband' %in% metrics){
# Broadband (checked)
BroadBandLevels =calcBroadband(prms,Psstrimmed)
# add key value pair
outList[['BroadBandLevels']]<-BroadBandLevels}
return(outList)
}
# Calculate the PSS within the user defined range, time stamps, and frequency
# vector.
dataOut = calcPSS(audioData, ii, prms, w)
rm(list = ls())
library(here)
library(lubridate)
library(stringr)
library(rhdf5)
library(tuneR)
#Define path to functions that we will use
source(here('NoiseProcessingFxs.r'))
# Scratch directory to set up noise analysis metrics following merchant 2012 (I think)
################################################################
# Load list of sound files and start times, assumes all audio files are the
# same duration
################################################################
# Assumes
# 1) file names in UTC
# 2) All sample rates are the same
fileLoc = 'D:\\RECORDINGS\\ADRIFT_001_CENSOR_12kHz'
fileLoc ='D:\\RECORDINGS\\ADRIFT_002_CENSOR_12kHz'
#fileLoc = 'C:\\Users\\kaitlin.palmer\\Downloads\\mee312330-sup-0002-datas1\\PAMGuide'
fileLoc ='D:\\Recordings\\ADRIFT_024_CENSOR\\ST6664'
fileLoc = 'C:\\Users\\kaitlin.palmer\\Desktop/ADRIFTLF/ADRIFT_024'
# Jasco Pattern
nameStringPattern = '\\d{8}T\\d{6}.\\d{3}'
nameStringFormat =" %Y%m%dT%H%M%OS"
# Soundtrap Pattern
nameStringPattern = '\\d{12}'
nameStringFormat ='%y%m%d%H%M%OS'
lubradiateFormat ="ymdHMS"
# Set up the audiodataframe
dataOut = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
prms=dataOut$prms
######################################################################
# Set up the analysis parameters
###################################################################
##
# User defined parameters
##
prms$N = prms$Fs # fft lenght in samples
prms$r = 0.5 # overlap in percent
prms$aveSec = 60 # averaging window (seconds)
prms$secSkip = 0 # number of seconds to skip when loading the file (soundtraps...)
# ratio of new to original window lengths in Welch method (avg over aveSec secs)
prms$welch = prms$aveSec*(prms$Fs/prms$N)/(1-prms$r)
# Analysis frequencies (hz).
prms$lcut =10
prms$hcut = prms$Fs/2
# Reference pressure, set to 1 for water 20 for air
prms$pref =1
# remove DC offset by subtracting mean(yy) from yy
prms$rmDC = TRUE
# Create window functions as defined by NM 2014
dataOut = createWindow('Hann', prms)
w =dataOut[[1]]
prms$alpha = dataOut[[2]]
# Which metrics to calculate, case sensitive
prms$metrics = t(list('hybrid', 'broadband', 'decadeband', 'thirdoct'))
###################################
# Calibration, either end to end or frequency response
###########################################
# Frequency response example, make sure start/end frequencies cover
# low frequency analysis end and nyquest
freqResp = data.frame(f = round(10:prms$Fs/2))
freqResp$E2E = seq(-185, -165, length.out = nrow(freqResp))
prms$freqCal= list(freqResp)
# End to end example
prms$freqCal= -161.1
################################################
# Other metrics for ICES/completeness
#####################################################
# Date the analysis was run
prms$DateRun <- now(tzone = "UTC")
# as ICES
prms$Comments <- 'This is a test of the emergency noise analysis system'
# Measurement depth in meters
prms$MeasurementHeight = 5
prms$HydrophoneType = 'HTI'
prms$HydrophoneSerialNumber ='856163'
ii=1
# Calculate the PSS within the user defined range, time stamps, and frequency
# vector.
dataOut = calcPSS(audioData, ii, prms, w)
View(dataOut)
dataOut$prms
# Set up the audiodataframe
dataOut = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
View(dataOut)
# Assumes
# 1) file names in UTC
# 2) All sample rates are the same
fileLoc = 'D:\\RECORDINGS\\ADRIFT_001_CENSOR_12kHz'
fileLoc ='D:\\RECORDINGS\\ADRIFT_002_CENSOR_12kHz'
#fileLoc = 'C:\\Users\\kaitlin.palmer\\Downloads\\mee312330-sup-0002-datas1\\PAMGuide'
fileLoc ='D:\\Recordings\\ADRIFT_024_CENSOR\\ST6664'
fileLoc = 'C:\\Users\\kaitlin.palmer\\Desktop/ADRIFTLF/ADRIFT_024'
# Jasco Pattern
nameStringPattern = '\\d{8}T\\d{6}.\\d{3}'
nameStringFormat =" %Y%m%dT%H%M%OS"
# Soundtrap Pattern
nameStringPattern = '\\d{12}'
nameStringFormat ='%y%m%d%H%M%OS'
lubradiateFormat ="ymdHMS"
# Set up the audiodataframe and iniitalize parameters
dataOut = createAudioDataframe(fileLoc,nameStringPattern = nameStringPattern,
lubradiateFormat = lubradiateFormat)
prms=dataOut$prms
audioData= dataOut$audioData
######################################################################
# Set up the analysis parameters
###################################################################
##
# User defined parameters
##
prms$N = prms$Fs # fft lenght in samples
prms$r = 0.5 # overlap in percent
prms$aveSec = 60 # averaging window (seconds)
prms$secSkip = 0 # number of seconds to skip when loading the file (soundtraps...)
# ratio of new to original window lengths in Welch method (avg over aveSec secs)
prms$welch = prms$aveSec*(prms$Fs/prms$N)/(1-prms$r)
# Analysis frequencies (hz).
prms$lcut =10
prms$hcut = prms$Fs/2
# Reference pressure, set to 1 for water 20 for air
prms$pref =1
# remove DC offset by subtracting mean(yy) from yy
prms$rmDC = TRUE
# Create window functions as defined by NM 2014
dataOut = createWindow('Hann', prms)
w =dataOut[[1]]
prms$alpha = dataOut[[2]]
# Which metrics to calculate, case sensitive
prms$metrics = t(list('hybrid', 'broadband', 'decadeband', 'thirdoct'))
###################################
# Calibration, either end to end or frequency response
###########################################
# Frequency response example, make sure start/end frequencies cover
# low frequency analysis end and nyquest
freqResp = data.frame(f = round(10:prms$Fs/2))
freqResp$E2E = seq(-185, -165, length.out = nrow(freqResp))
prms$freqCal= list(freqResp)
# End to end example
prms$freqCal= -161.1
################################################
# Other metrics for ICES/completeness
#####################################################
# Date the analysis was run
prms$DateRun <- now(tzone = "UTC")
# as ICES
prms$Comments <- 'This is a test of the emergency noise analysis system'
# Measurement depth in meters
prms$MeasurementHeight = 5
prms$HydrophoneType = 'HTI'
prms$HydrophoneSerialNumber ='856163'
################################################################
# Set up the H5DF file and group
################################################################
# Project name with current date (latter mostly for debugging)
ProjName = paste0("Adrift_2022",format(Sys.time(), "%Y-%m-%d%H%M%S"), '.h5')
# Instrument name, here I'm using soundtrap IDs
instrumentName = "ST5987"
instrumentName = "ST6664"
ii=1
idStart =1
# Calculate the PSS within the user defined range, time stamps, and frequency
# vector.
dataOut = calcPSS(audioData, ii, prms, w)
Psstrimmed= dataOut[[1]]
tt= dataOut[[2]]
f = dataOut[[3]]
avPSD= 10*log10(Psstrimmed)
dataOut<-calcMetrics(prms, Psstrimmed, f, w)
calcMetrics<-function(prms, Psstrimmed, f, w){
# Driver function to return a matrix of
# metrics - list of metrics to calculate including hybrid, broadband, decadeband
# and thirdoct
# prms- dataframe of parameters
# Psstrimmed - power spectrum
# f - frequencies associated with the PSS
outList = list()
if('hybrid' %in% metrics){
# Hybrid milidecade from PSS
hybridMilidecade = calcHybridMiDecade(prms, Psstrimmed, f, w)
# add key value pair
outList[['hybLevels']]<-hybridMilidecade[[1]]
outList[['hybFreqs']]<-hybridMilidecade[[2]]
}
if('thirdoct' %in% metrics){
# Third Ocatave Bands (checked)
thirdOctBands= calcThirdOctBands(prms, Psstrimmed,f, w)
# add key value pair
outList[['thridOctLevels']]<-thirdOctBands[[1]]
outList[['thirdOctF']]<-thirdOctBands[[2]]
}
if('decadeband' %in% metrics){
# Decade bands
DecadeBands =calcDecadeBands(prms, Psstrimmed,f, w)
# add key value pair
outList[['DecadeBandsLevels']]<-DecadeBands[[1]]
outList[['DecadeBandsF']]<-DecadeBands[[2]]
}
if('broadband' %in% metrics){
# Broadband (checked)
BroadBandLevels =calcBroadband(prms,Psstrimmed)
# add key value pair
outList[['BroadBandLevels']]<-BroadBandLevels}
return(outList)
}
dataOut<-calcMetrics(prms, Psstrimmed, f, w)
calcMetrics<-function(prms, Psstrimmed, f, w){
# Driver function to return a matrix of
# metrics - list of metrics to calculate including hybrid, broadband, decadeband
# and thirdoct
# prms- dataframe of parameters
# Psstrimmed - power spectrum
# f - frequencies associated with the PSS
metrics<-prms$metrics
outList = list()
if('hybrid' %in% metrics){
# Hybrid milidecade from PSS
hybridMilidecade = calcHybridMiDecade(prms, Psstrimmed, f, w)
# add key value pair
outList[['hybLevels']]<-hybridMilidecade[[1]]
outList[['hybFreqs']]<-hybridMilidecade[[2]]
}
if('thirdoct' %in% metrics){
# Third Ocatave Bands (checked)
thirdOctBands= calcThirdOctBands(prms, Psstrimmed,f, w)
# add key value pair
outList[['thridOctLevels']]<-thirdOctBands[[1]]
outList[['thirdOctF']]<-thirdOctBands[[2]]
}
if('decadeband' %in% metrics){
# Decade bands
DecadeBands =calcDecadeBands(prms, Psstrimmed,f, w)
# add key value pair
outList[['DecadeBandsLevels']]<-DecadeBands[[1]]
outList[['DecadeBandsF']]<-DecadeBands[[2]]
}
if('broadband' %in% metrics){
# Broadband (checked)
BroadBandLevels =calcBroadband(prms,Psstrimmed)
# add key value pair
outList[['BroadBandLevels']]<-BroadBandLevels}
return(outList)
}
dataOut<-calcMetrics(prms, Psstrimmed, f, w)
View(dataOut)
names(dataOut\)
names(dataOut)
(hybLevels %in% prms$metrics)
prms$metrics
